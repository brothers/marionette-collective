#!/usr/bin/env ruby

require 'mcollective'

script = nil
node = nil

oparser = MCollective::Optionparser.new({})

@options = oparser.parse{|parser, options|
    parser.define_head "Shows an inventory for a given node"
    parser.banner = "Usage: mc-inventory [options] node"

    parser.on('--script SCRIPT', 'Script to run') do |v|
        script = v
    end
}

if ARGV.length > 0
    node = ARGV.shift
end

unless script || node
    STDERR.puts("Please specify a node or script to run")
    exit 1
end

# Monkey patching array with a in_groups_of method
# that walks an array in groups, pass a block to 
# call the block on each sub array
class Array
    def in_groups_of(chunk_size, padded_with=nil)
        arr = self.clone

        # how many to add
        padding = chunk_size - (arr.size % chunk_size)

        # pad at the end
        arr.concat([padded_with] * padding)

        # how many chunks we'll make
        count = arr.size / chunk_size

        # make that many arrays
        result = []
        count.times {|s| result <<  arr[s * chunk_size, chunk_size]}

        if block_given?
            result.each{|a| yield(a)}
        else
            result
        end
    end
end

def node_inventory(node, options)
    begin
        client = MCollective::Client.new(options[:config])

        options[:filter]["identity"] << node
        client.options = options

        stats = client.req("inventory", "discovery") do |resp|
            puts "Inventory for #{resp[:senderid]}:"
            puts

            puts "   Agents:"
            resp[:body][:agents].sort.in_groups_of(3, "") do |agents|
                puts "      %-15s %-15s %-15s" % agents
            end
            puts

            puts "   Configuration Management Classes:"
            resp[:body][:classes].sort.in_groups_of(2, "") do |klasses|
                puts "      %-30s %-30s" % klasses
            end
            puts

            puts "   Facts:"
            resp[:body][:facts].sort_by{|f| f[0]}.each do |f|
                puts "      #{f[0]} => #{f[1]}"
            end

            break
        end
    rescue Exception => e
        puts "Could not show inventory for node #{node}: #{e}"
    end
end

# Helpers to create a simple DSL for scriptlets
def format(fmt)
    @fmt = fmt
end

def fields(&blk)
    @flds = blk
end

def identity
    @node[:identity]
end

def facts
    @node[:facts]
end

def classes
    @node[:classes]
end

def agents
    @node[:agents]
end

def inventory(&blk)
    raise "Need to give a block to inventory" unless block_given?

    blk.call if block_given?

    raise "Need to define a format" if @fmt.nil?
    raise "Need to define inventory fields" if @flds.nil?

    client = MCollective::Client.new(@options[:config])

    stats = client.req("inventory", "discovery", @options) do |resp|
        @node = {:identity => resp[:senderid],
                 :facts    => resp[:body][:facts],
                 :classes  => resp[:body][:classes],
                 :agents   => resp[:body][:agents]}

        puts @fmt % @flds.call
    end
end

@fmt = nil
@flds = nil

if script
    if File.exist?(script)
        load(script)
    else
        puts "Could not find script to run: #{script}"
        exit 1
    end
else
    node_inventory(node, @options)
end

# vi:tabstop=4:expandtab:ai
